"use strict";(self.webpackChunkcardgamemaker=self.webpackChunkcardgamemaker||[]).push([[485],{4732:(e,t,r)=>{var n=r(8507);class i{static init(e){Object.defineProperty(this,"resizeTo",{set(e){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=e,e&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame((()=>this.resize())))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;let e,t;if(this._cancelResize(),this._resizeTo===globalThis.window)e=globalThis.innerWidth,t=globalThis.innerHeight;else{const{clientWidth:r,clientHeight:n}=this._resizeTo;e=r,t=n}this.renderer.resize(e,t),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}i.extension=n.Ag.Application;var s=r(4458),a=r(7309);class o{static init(e){e=Object.assign({autoStart:!0,sharedTicker:!1},e),Object.defineProperty(this,"ticker",{set(e){this._ticker&&this._ticker.remove(this.render,this),this._ticker=e,e&&e.add(this.render,this,s.d.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=e.sharedTicker?a.R.shared:new a.R,e.autoStart&&this.start()}static destroy(){if(this._ticker){const e=this._ticker;this.ticker=null,e.destroy()}}}o.extension=n.Ag.Application,n.XO.add(i),n.XO.add(o)},4980:(e,t,r)=>{var n=r(8507);class i{constructor(e){this._renderer=e}push(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:t,filterEffect:e})}pop(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(e){"pushFilter"===e.action?this._renderer.filter.push(e):"popFilter"===e.action&&this._renderer.filter.pop()}destroy(){this._renderer=null}}i.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"filter"};var s=r(9313),a=r(3513),o=r(6011),l=r(5811),u=r(4492),d=r(2437),h=r(5099),c=r(9636),p=r(268);const f=new o.V({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),format:"float32x2",stride:8,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class g{constructor(){this.skip=!1,this.inputTexture=null,this.backTexture=null,this.filters=null,this.bounds=new c.c,this.container=null,this.blendRequired=!1,this.outputRenderSurface=null,this.globalFrame={x:0,y:0,width:0,height:0}}}class m{constructor(e){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new l.k({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new a.T({}),this.renderer=e}get activeBackTexture(){return this._activeFilterData?.backTexture}push(e){const t=this.renderer,r=e.filterEffect.filters,n=this._pushFilterData();n.skip=!1,n.filters=r,n.container=e.container,n.outputRenderSurface=t.renderTarget.renderSurface;const i=t.renderTarget.renderTarget.colorTexture.source,s=i.resolution,a=i.antialias;if(0===r.length)return void(n.skip=!0);const o=n.bounds;if(this._calculateFilterArea(e,o),this._calculateFilterBounds(n,t.renderTarget.rootViewPort,a,s,1),n.skip)return;const l=this._getPreviousFilterData(),u=this._findFilterResolution(s);let d=0,h=0;l&&(d=l.bounds.minX,h=l.bounds.minY),this._calculateGlobalFrame(n,d,h,u,i.width,i.height),this._setupFilterTextures(n,o,t,l)}generateFilteredTexture({texture:e,filters:t}){const r=this._pushFilterData();this._activeFilterData=r,r.skip=!1,r.filters=t;const n=e.source,i=n.resolution,s=n.antialias;if(0===t.length)return r.skip=!0,e;const a=r.bounds;if(a.addRect(e.frame),this._calculateFilterBounds(r,a.rectangle,s,i,0),r.skip)return e;const o=i;this._calculateGlobalFrame(r,0,0,o,n.width,n.height),r.outputRenderSurface=d.W.getOptimalTexture(a.width,a.height,r.resolution,r.antialias),r.backTexture=u.g.EMPTY,r.inputTexture=e,this.renderer.renderTarget.finishRenderPass(),this._applyFiltersToTexture(r,!0);const l=r.outputRenderSurface;return l.source.alphaMode="premultiplied-alpha",l}pop(){const e=this.renderer,t=this._popFilterData();t.skip||(e.globalUniforms.pop(),e.renderTarget.finishRenderPass(),this._activeFilterData=t,this._applyFiltersToTexture(t,!1),t.blendRequired&&d.W.returnTexture(t.backTexture),d.W.returnTexture(t.inputTexture))}getBackTexture(e,t,r){const n=e.colorTexture.source._resolution,i=d.W.getOptimalTexture(t.width,t.height,n,!1);let s=t.minX,a=t.minY;r&&(s-=r.minX,a-=r.minY),s=Math.floor(s*n),a=Math.floor(a*n);const o=Math.ceil(t.width*n),l=Math.ceil(t.height*n);return this.renderer.renderTarget.copyToTexture(e,i,{x:s,y:a},{width:o,height:l},{x:0,y:0}),i}applyFilter(e,t,r,n){const i=this.renderer,s=this._activeFilterData,a=s.outputRenderSurface===r,o=i.renderTarget.rootRenderTarget.colorTexture.source._resolution,l=this._findFilterResolution(o);let u=0,d=0;if(a){const e=this._findPreviousFilterOffset();u=e.x,d=e.y}this._updateFilterUniforms(t,r,s,u,d,l,a,n),this._setupBindGroupsAndRender(e,t,i)}calculateSpriteMatrix(e,t){const r=this._activeFilterData,n=e.set(r.inputTexture._source.width,0,0,r.inputTexture._source.height,r.bounds.minX,r.bounds.minY),i=t.worldTransform.copyTo(s.u.shared),a=t.renderGroup||t.parentRenderGroup;return a&&a.cacheToLocalTransform&&i.prepend(a.cacheToLocalTransform),i.invert(),n.prepend(i),n.scale(1/t.texture.orig.width,1/t.texture.orig.height),n.translate(t.anchor.x,t.anchor.y),n}destroy(){}_setupBindGroupsAndRender(e,t,r){if(r.renderPipes.uniformBatch){const e=r.renderPipes.uniformBatch.getUboResource(this._filterGlobalUniforms);this._globalFilterBindGroup.setResource(e,0)}else this._globalFilterBindGroup.setResource(this._filterGlobalUniforms,0);this._globalFilterBindGroup.setResource(t.source,1),this._globalFilterBindGroup.setResource(t.source.style,2),e.groups[0]=this._globalFilterBindGroup,r.encoder.draw({geometry:f,shader:e,state:e._state,topology:"triangle-list"}),r.type===h.W.WEBGL&&r.renderTarget.finishRenderPass()}_setupFilterTextures(e,t,r,n){if(e.backTexture=u.g.EMPTY,e.blendRequired){r.renderTarget.finishRenderPass();const i=r.renderTarget.getRenderTarget(e.outputRenderSurface);e.backTexture=this.getBackTexture(i,t,n?.bounds)}e.inputTexture=d.W.getOptimalTexture(t.width,t.height,e.resolution,e.antialias),r.renderTarget.bind(e.inputTexture,!0),r.globalUniforms.push({offset:t})}_calculateGlobalFrame(e,t,r,n,i,s){const a=e.globalFrame;a.x=t*n,a.y=r*n,a.width=i*n,a.height=s*n}_updateFilterUniforms(e,t,r,n,i,s,a,o){const l=this._filterGlobalUniforms.uniforms,d=l.uOutputFrame,h=l.uInputSize,c=l.uInputPixel,p=l.uInputClamp,f=l.uGlobalFrame,g=l.uOutputTexture;a?(d[0]=r.bounds.minX-n,d[1]=r.bounds.minY-i):(d[0]=0,d[1]=0),d[2]=e.frame.width,d[3]=e.frame.height,h[0]=e.source.width,h[1]=e.source.height,h[2]=1/h[0],h[3]=1/h[1],c[0]=e.source.pixelWidth,c[1]=e.source.pixelHeight,c[2]=1/c[0],c[3]=1/c[1],p[0]=.5*c[2],p[1]=.5*c[3],p[2]=e.frame.width*h[2]-.5*c[2],p[3]=e.frame.height*h[3]-.5*c[3];const m=this.renderer.renderTarget.rootRenderTarget.colorTexture;f[0]=n*s,f[1]=i*s,f[2]=m.source.width*s,f[3]=m.source.height*s,t instanceof u.g&&(t.source.resource=null);const x=this.renderer.renderTarget.getRenderTarget(t);this.renderer.renderTarget.bind(t,!!o),t instanceof u.g?(g[0]=t.frame.width,g[1]=t.frame.height):(g[0]=x.width,g[1]=x.height),g[2]=x.isRoot?-1:1,this._filterGlobalUniforms.update()}_findFilterResolution(e){let t=this._filterStackIndex-1;for(;t>0&&this._filterStack[t].skip;)--t;return t>0&&this._filterStack[t].inputTexture?this._filterStack[t].inputTexture.source._resolution:e}_findPreviousFilterOffset(){let e=0,t=0,r=this._filterStackIndex;for(;r>0;){r--;const n=this._filterStack[r];if(!n.skip){e=n.bounds.minX,t=n.bounds.minY;break}}return{x:e,y:t}}_calculateFilterArea(e,t){if(e.renderables?function(e,t){t.clear();const r=t.matrix;for(let r=0;r<e.length;r++){const n=e[r];n.globalDisplayStatus<7||(t.matrix=n.worldTransform,t.addBounds(n.bounds))}t.matrix=r}(e.renderables,t):e.filterEffect.filterArea?(t.clear(),t.addRect(e.filterEffect.filterArea),t.applyMatrix(e.container.worldTransform)):e.container.getFastGlobalBounds(!0,t),e.container){const r=(e.container.renderGroup||e.container.parentRenderGroup).cacheToLocalTransform;r&&t.applyMatrix(r)}}_applyFiltersToTexture(e,t){const r=e.inputTexture,n=e.bounds,i=e.filters;if(this._globalFilterBindGroup.setResource(r.source.style,2),this._globalFilterBindGroup.setResource(e.backTexture.source,3),1===i.length)i[0].apply(this,r,e.outputRenderSurface,t);else{let r=e.inputTexture;const s=d.W.getOptimalTexture(n.width,n.height,r.source._resolution,!1);let a=s,o=0;for(o=0;o<i.length-1;++o){i[o].apply(this,r,a,!0);const e=r;r=a,a=e}i[o].apply(this,r,e.outputRenderSurface,t),d.W.returnTexture(s)}}_calculateFilterBounds(e,t,r,n,i){const s=this.renderer,a=e.bounds,o=e.filters;let l=1/0,u=0,d=!0,h=!1,c=!1,f=!0;for(let e=0;e<o.length;e++){const t=o[e];if(l=Math.min(l,"inherit"===t.resolution?n:t.resolution),u+=t.padding,"off"===t.antialias?d=!1:"inherit"===t.antialias&&d&&(d=r),t.clipToViewport||(f=!1),!(t.compatibleRenderers&s.type)){c=!1;break}if(t.blendRequired&&!(s.backBuffer?.useBackBuffer??1)){(0,p.R)("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),c=!1;break}c=t.enabled||c,h||(h=t.blendRequired)}c?(f&&a.fitBounds(0,t.width/n,0,t.height/n),a.scale(l).ceil().scale(1/l).pad((0|u)*i),a.isPositive?(e.antialias=d,e.resolution=l,e.blendRequired=h):e.skip=!0):e.skip=!0}_popFilterData(){return this._filterStackIndex--,this._filterStack[this._filterStackIndex]}_getPreviousFilterData(){let e,t=this._filterStackIndex-1;for(;t>1&&(t--,e=this._filterStack[t],e.skip););return e}_pushFilterData(){let e=this._filterStack[this._filterStackIndex];return e||(e=this._filterStack[this._filterStackIndex]=new g),this._filterStackIndex++,e}}m.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem],name:"filter"},n.XO.add(m),n.XO.add(i)},2067:(e,t,r)=>{r.d(t,{Ls:()=>n,_Q:()=>i,mA:()=>s});const n={name:"local-uniform-bit",vertex:{header:"\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "}},i={...n,vertex:{...n.vertex,header:n.vertex.header.replace("group(1)","group(2)")}},s={name:"local-uniform-bit",vertex:{header:"\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "}}},7547:(e,t,r)=>{r.d(t,{U:()=>s});const n={normal:0,add:1,multiply:2,screen:3,overlay:4,erase:5,"normal-npm":6,"add-npm":7,"screen-npm":8,min:9,max:10},i=class e{constructor(){this.data=0,this.blendMode="normal",this.polygonOffset=0,this.blend=!0,this.depthMask=!0}get blend(){return!!(1&this.data)}set blend(e){!!(1&this.data)!==e&&(this.data^=1)}get offsets(){return!!(2&this.data)}set offsets(e){!!(2&this.data)!==e&&(this.data^=2)}set cullMode(e){"none"!==e?(this.culling=!0,this.clockwiseFrontFace="front"===e):this.culling=!1}get cullMode(){return this.culling?this.clockwiseFrontFace?"front":"back":"none"}get culling(){return!!(4&this.data)}set culling(e){!!(4&this.data)!==e&&(this.data^=4)}get depthTest(){return!!(8&this.data)}set depthTest(e){!!(8&this.data)!==e&&(this.data^=8)}get depthMask(){return!!(32&this.data)}set depthMask(e){!!(32&this.data)!==e&&(this.data^=32)}get clockwiseFrontFace(){return!!(16&this.data)}set clockwiseFrontFace(e){!!(16&this.data)!==e&&(this.data^=16)}get blendMode(){return this._blendMode}set blendMode(e){this.blend="none"!==e,this._blendMode=e,this._blendModeId=n[e]||0}get polygonOffset(){return this._polygonOffset}set polygonOffset(e){this.offsets=!!e,this._polygonOffset=e}toString(){return`[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`}static for2d(){const t=new e;return t.depthTest=!1,t.blend=!0,t}};i.default2d=i.for2d();let s=i},7608:(e,t,r)=>{r.d(t,{N:()=>s});var n=r(1761),i=r(9939);const s=new class{constructor(e){this._canvasPool=Object.create(null),this.canvasOptions=e||{},this.enableFullScreen=!1}_createCanvasAndContext(e,t){const r=n.e.get().createCanvas();r.width=e,r.height=t;const i=r.getContext("2d");return{canvas:r,context:i}}getOptimalCanvasAndContext(e,t,r=1){e=Math.ceil(e*r-1e-6),t=Math.ceil(t*r-1e-6);const n=((e=(0,i.U5)(e))<<17)+((t=(0,i.U5)(t))<<1);this._canvasPool[n]||(this._canvasPool[n]=[]);let s=this._canvasPool[n].pop();return s||(s=this._createCanvasAndContext(e,t)),s}returnCanvasAndContext(e){const t=e.canvas,{width:r,height:n}=t,i=(r<<17)+(n<<1);e.context.resetTransform(),e.context.clearRect(0,0,r,n),this._canvasPool[i].push(e)}clear(){this._canvasPool={}}}},2760:(e,t,r)=>{function n(e,t,r){const n=(e>>24&255)/255;t[r++]=(255&e)/255*n,t[r++]=(e>>8&255)/255*n,t[r++]=(e>>16&255)/255*n,t[r++]=n}r.d(t,{V:()=>n})},8928:(e,t,r)=>{var n=r(8507),i=r(6302),s=r(7547),a=r(8218),o=r(2760),l=r(6954);class u{constructor(){this.batches=[],this.batched=!1}destroy(){this.batches.forEach((e=>{a.Z.return(e)})),this.batches.length=0}}class d{constructor(e,t){this.state=s.U.for2d(),this.renderer=e,this._adaptor=t,this.renderer.runners.contextChange.add(this)}contextChange(){this._adaptor.contextChange(this.renderer)}validateRenderable(e){const t=e.context,r=!!e._gpuData,n=this.renderer.graphicsContext.updateGpuContext(t);return!(!n.isBatchable&&r===n.isBatchable)}addRenderable(e,t){const r=this.renderer.graphicsContext.updateGpuContext(e.context);e.didViewUpdate&&this._rebuild(e),r.isBatchable?this._addToBatcher(e,t):(this.renderer.renderPipes.batch.break(t),t.add(e))}updateRenderable(e){const t=this._getGpuDataForRenderable(e).batches;for(let e=0;e<t.length;e++){const r=t[e];r._batcher.updateElement(r)}}execute(e){if(!e.isRenderable)return;const t=this.renderer,r=e.context;if(!t.graphicsContext.getGpuContext(r).batches.length)return;const n=r.customShader||this._adaptor.shader;this.state.blendMode=e.groupBlendMode;const i=n.resources.localUniforms.uniforms;i.uTransformMatrix=e.groupTransform,i.uRound=t._roundPixels|e._roundPixels,(0,o.V)(e.groupColorAlpha,i.uColor,0),this._adaptor.execute(this,e)}_rebuild(e){const t=this._getGpuDataForRenderable(e),r=this.renderer.graphicsContext.updateGpuContext(e.context);t.destroy(),r.isBatchable&&this._updateBatchesForRenderable(e,t)}_addToBatcher(e,t){const r=this.renderer.renderPipes.batch,n=this._getGpuDataForRenderable(e).batches;for(let e=0;e<n.length;e++){const i=n[e];r.addToBatch(i,t)}}_getGpuDataForRenderable(e){return e._gpuData[this.renderer.uid]||this._initGpuDataForRenderable(e)}_initGpuDataForRenderable(e){const t=new u;return e._gpuData[this.renderer.uid]=t,t}_updateBatchesForRenderable(e,t){const r=e.context,n=this.renderer.graphicsContext.getGpuContext(r),i=this.renderer._roundPixels|e._roundPixels;t.batches=n.batches.map((t=>{const r=a.Z.get(l.G);return t.copyTo(r),r.renderable=e,r.roundPixels=i,r}))}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null}}d.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"graphics"},n.XO.add(d),n.XO.add(i.GH)},5285:(e,t,r)=>{var n=r(8507),i=r(9313),s=r(3513),a=r(5811),o=r(8639),l=r(2760),u=r(8734);class d{destroy(){}}class h{constructor(e,t){this.localUniforms=new a.k({uTransformMatrix:{value:new i.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new s.T({0:this.localUniforms}),this.renderer=e,this._adaptor=t,this._adaptor.init()}validateRenderable(e){const t=this._getMeshData(e),r=t.batched,n=e.batched;if(t.batched=n,r!==n)return!0;if(n){const r=e._geometry;if(r.indices.length!==t.indexSize||r.positions.length!==t.vertexSize)return t.indexSize=r.indices.length,t.vertexSize=r.positions.length,!0;const n=this._getBatchableMesh(e);return n.texture.uid!==e._texture.uid&&(n._textureMatrixUpdateId=-1),!n._batcher.checkAndUpdateTexture(n,e._texture)}return!1}addRenderable(e,t){const r=this.renderer.renderPipes.batch,n=this._getMeshData(e);if(e.didViewUpdate&&(n.indexSize=e._geometry.indices?.length,n.vertexSize=e._geometry.positions?.length),n.batched){const n=this._getBatchableMesh(e);n.setTexture(e._texture),n.geometry=e._geometry,r.addToBatch(n,t)}else r.break(t),t.add(e)}updateRenderable(e){if(e.batched){const t=this._getBatchableMesh(e);t.setTexture(e._texture),t.geometry=e._geometry,t._batcher.updateElement(t)}}execute(e){if(!e.isRenderable)return;e.state.blendMode=(0,o.i)(e.groupBlendMode,e.texture._source);const t=this.localUniforms;t.uniforms.uTransformMatrix=e.groupTransform,t.uniforms.uRound=this.renderer._roundPixels|e._roundPixels,t.update(),(0,l.V)(e.groupColorAlpha,t.uniforms.uColor,0),this._adaptor.execute(this,e)}_getMeshData(e){var t,r;return(t=e._gpuData)[r=this.renderer.uid]||(t[r]=new d),e._gpuData[this.renderer.uid].meshData||this._initMeshData(e)}_initMeshData(e){return e._gpuData[this.renderer.uid].meshData={batched:e.batched,indexSize:0,vertexSize:0},e._gpuData[this.renderer.uid].meshData}_getBatchableMesh(e){var t,r;return(t=e._gpuData)[r=this.renderer.uid]||(t[r]=new d),e._gpuData[this.renderer.uid].batchableMesh||this._initBatchableMesh(e)}_initBatchableMesh(e){const t=new u.U;return t.renderable=e,t.setTexture(e._texture),t.transform=e.groupTransform,t.roundPixels=this.renderer._roundPixels|e._roundPixels,e._gpuData[this.renderer.uid].batchableMesh=t,t}destroy(){this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}h.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"mesh"},n.XO.add(h)},8734:(e,t,r)=>{r.d(t,{U:()=>n});class n{constructor(){this.batcherName="default",this.packAsQuad=!1,this.indexOffset=0,this.attributeOffset=0,this.roundPixels=0,this._batcher=null,this._batch=null,this._textureMatrixUpdateId=-1,this._uvUpdateId=-1}get blendMode(){return this.renderable.groupBlendMode}get topology(){return this._topology||this.geometry.topology}set topology(e){this._topology=e}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.geometry=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}setTexture(e){this.texture!==e&&(this.texture=e,this._textureMatrixUpdateId=-1)}get uvs(){const e=this.geometry.getBuffer("aUV"),t=e.data;let r=t;const n=this.texture.textureMatrix;return n.isSimple||(r=this._transformedUvs,this._textureMatrixUpdateId===n._updateID&&this._uvUpdateId===e._updateID||((!r||r.length<t.length)&&(r=this._transformedUvs=new Float32Array(t.length)),this._textureMatrixUpdateId=n._updateID,this._uvUpdateId=e._updateID,n.multiplyUvs(t,r))),r}get positions(){return this.geometry.positions}get indices(){return this.geometry.indices}get color(){return this.renderable.groupColorAlpha}get groupTransform(){return this.renderable.groupTransform}get attributeSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}},9305:(e,t,r)=>{var n=r(8507);class i{execute(e,t){const r=e.state,n=e.renderer,i=t.shader||e.defaultShader;i.resources.uTexture=t.texture._source,i.resources.uniforms=e.localUniforms;const s=n.gl,a=e.getBuffers(t);n.shader.bind(i),n.state.set(r),n.geometry.bind(a.geometry,i.glProgram);const o=2===a.geometry.indexBuffer.data.BYTES_PER_ELEMENT?s.UNSIGNED_SHORT:s.UNSIGNED_INT;s.drawElements(s.TRIANGLES,6*t.particleChildren.length,o,0)}}var s=r(9313),a=r(5811),o=r(8639),l=r(7547),u=r(2760),d=r(949),h=r(1132),c=r(6011),p=r(8306),f=r(1460);function g(e,t=null){const r=6*e;if(r>65535?t||(t=new Uint32Array(r)):t||(t=new Uint16Array(r)),t.length!==r)throw new Error(`Out buffer length is incorrect, got ${t.length} and expected ${r}`);for(let e=0,n=0;e<r;e+=6,n+=4)t[e+0]=n+0,t[e+1]=n+1,t[e+2]=n+2,t[e+3]=n+0,t[e+4]=n+2,t[e+5]=n+3;return t}function m(e,t){const r=[];r.push("\n\n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            ");let n=0;for(const i in e){const s=e[i];t===s.dynamic&&(r.push(`offset = index + ${n}`),r.push(s.code),n+=(0,p.m)(s.format).stride/4)}r.push("\n            index += stride * 4;\n        }\n    "),r.unshift(`\n        var stride = ${n};\n    `);const i=r.join("\n");return new Function("ps","f32v","u32v",i)}class x{constructor(e){this._size=0,this._generateParticleUpdateCache={};const t=this._size=e.size??1e3,r=e.properties;let n=0,i=0;for(const e in r){const t=r[e],s=(0,p.m)(t.format);t.dynamic?i+=s.stride:n+=s.stride}this._dynamicStride=i/4,this._staticStride=n/4,this.staticAttributeBuffer=new f.u(4*t*n),this.dynamicAttributeBuffer=new f.u(4*t*i),this.indexBuffer=g(t);const s=new c.V;let a=0,o=0;this._staticBuffer=new d.h({data:new Float32Array(1),label:"static-particle-buffer",shrinkToFit:!1,usage:h.S.VERTEX|h.S.COPY_DST}),this._dynamicBuffer=new d.h({data:new Float32Array(1),label:"dynamic-particle-buffer",shrinkToFit:!1,usage:h.S.VERTEX|h.S.COPY_DST});for(const e in r){const t=r[e],n=(0,p.m)(t.format);t.dynamic?(s.addAttribute(t.attributeName,{buffer:this._dynamicBuffer,stride:4*this._dynamicStride,offset:4*a,format:t.format}),a+=n.size):(s.addAttribute(t.attributeName,{buffer:this._staticBuffer,stride:4*this._staticStride,offset:4*o,format:t.format}),o+=n.size)}s.addIndex(this.indexBuffer);const l=this.getParticleUpdate(r);this._dynamicUpload=l.dynamicUpdate,this._staticUpload=l.staticUpdate,this.geometry=s}getParticleUpdate(e){const t=function(e){const t=[];for(const r in e){const n=e[r];t.push(r,n.code,n.dynamic?"d":"s")}return t.join("_")}(e);return this._generateParticleUpdateCache[t]||(this._generateParticleUpdateCache[t]=this.generateParticleUpdate(e)),this._generateParticleUpdateCache[t]}generateParticleUpdate(e){return function(e){return{dynamicUpdate:m(e,!0),staticUpdate:m(e,!1)}}(e)}update(e,t){e.length>this._size&&(t=!0,this._size=Math.max(e.length,1.5*this._size|0),this.staticAttributeBuffer=new f.u(this._size*this._staticStride*4*4),this.dynamicAttributeBuffer=new f.u(this._size*this._dynamicStride*4*4),this.indexBuffer=g(this._size),this.geometry.indexBuffer.setDataWithSize(this.indexBuffer,this.indexBuffer.byteLength,!0));const r=this.dynamicAttributeBuffer;if(this._dynamicUpload(e,r.float32View,r.uint32View),this._dynamicBuffer.setDataWithSize(this.dynamicAttributeBuffer.float32View,e.length*this._dynamicStride*4,!0),t){const t=this.staticAttributeBuffer;this._staticUpload(e,t.float32View,t.uint32View),this._staticBuffer.setDataWithSize(t.float32View,e.length*this._staticStride*4,!0)}}destroy(){this._staticBuffer.destroy(),this._dynamicBuffer.destroy(),this.geometry.destroy()}}var _=r(2577),y=r(9113),b=r(3012),S=r(8475),w=r(4492),v=r(218),T="\nstruct ParticleUniforms {\n  uProjectionMatrix:mat3x3<f32>,\n  uColor:vec4<f32>,\n  uResolution:vec2<f32>,\n  uRoundPixels:f32,\n};\n\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\n\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\n@group(1) @binding(1) var uSampler : sampler;\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>,\n    @location(1) color : vec4<f32>,\n  };\n@vertex\nfn mainVertex(\n  @location(0) aVertex: vec2<f32>,\n  @location(1) aPosition: vec2<f32>,\n  @location(2) aUV: vec2<f32>,\n  @location(3) aColor: vec4<f32>,\n  @location(4) aRotation: f32,\n) -> VSOutput {\n  \n   let v = vec2(\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\n   ) + aPosition;\n\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\n\n  return VSOutput(\n   position,\n   aUV,\n   vColor,\n  );\n}\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @location(1) color: vec4<f32>,\n  @builtin(position) position: vec4<f32>,\n) -> @location(0) vec4<f32> {\n\n    var sample = textureSample(uTexture, uSampler, uv) * color;\n   \n    return sample;\n}";class C extends S.M{constructor(){super({glProgram:y.M.from({vertex:"attribute vec2 aVertex;\nattribute vec2 aUV;\nattribute vec4 aColor;\n\nattribute vec2 aPosition;\nattribute float aRotation;\n\nuniform mat3 uTranslationMatrix;\nuniform float uRound;\nuniform vec2 uResolution;\nuniform vec4 uColor;\n\nvarying vec2 vUV;\nvarying vec4 vColor;\n\nvec2 roundPixels(vec2 position, vec2 targetSize)\n{       \n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n}\n\nvoid main(void){\n    float cosRotation = cos(aRotation);\n    float sinRotation = sin(aRotation);\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\n\n    vec2 v = vec2(x, y);\n    v = v + aPosition;\n\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n    if(uRound == 1.0)\n    {\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n    }\n\n    vUV = aUV;\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\n}\n",fragment:"varying vec2 vUV;\nvarying vec4 vColor;\n\nuniform sampler2D uTexture;\n\nvoid main(void){\n    vec4 color = texture2D(uTexture, vUV) * vColor;\n    gl_FragColor = color;\n}"}),gpuProgram:b.B.from({fragment:{source:T,entryPoint:"mainFragment"},vertex:{source:T,entryPoint:"mainVertex"}}),resources:{uTexture:w.g.WHITE.source,uSampler:new v.n({}),uniforms:{uTranslationMatrix:{value:new s.u,type:"mat3x3<f32>"},uColor:{value:new _.Q(16777215),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}}})}}class P{constructor(e,t){this.state=l.U.for2d(),this.localUniforms=new a.k({uTranslationMatrix:{value:new s.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array(4),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}),this.renderer=e,this.adaptor=t,this.defaultShader=new C,this.state=l.U.for2d()}validateRenderable(e){return!1}addRenderable(e,t){this.renderer.renderPipes.batch.break(t),t.add(e)}getBuffers(e){return e._gpuData[this.renderer.uid]||this._initBuffer(e)}_initBuffer(e){return e._gpuData[this.renderer.uid]=new x({size:e.particleChildren.length,properties:e._properties}),e._gpuData[this.renderer.uid]}updateRenderable(e){}execute(e){const t=e.particleChildren;if(0===t.length)return;const r=this.renderer,n=this.getBuffers(e);e.texture||(e.texture=t[0].texture);const i=this.state;n.update(t,e._childrenDirty),e._childrenDirty=!1,i.blendMode=(0,o.i)(e.blendMode,e.texture._source);const s=this.localUniforms.uniforms,a=s.uTranslationMatrix;e.worldTransform.copyTo(a),a.prepend(r.globalUniforms.globalUniformData.projectionMatrix),s.uResolution=r.globalUniforms.globalUniformData.resolution,s.uRound=r._roundPixels|e._roundPixels,(0,u.V)(e.groupColorAlpha,s.uColor,0),this.adaptor.execute(this,e)}destroy(){this.defaultShader&&(this.defaultShader.destroy(),this.defaultShader=null)}}class F extends P{constructor(e){super(e,new i)}}F.extension={type:[n.Ag.WebGLPipes],name:"particle"};class k{execute(e,t){const r=e.renderer,n=t.shader||e.defaultShader;n.groups[0]=r.renderPipes.uniformBatch.getUniformBindGroup(e.localUniforms,!0),n.groups[1]=r.texture.getTextureBindGroup(t.texture);const i=e.state,s=e.getBuffers(t);r.encoder.draw({geometry:s.geometry,shader:t.shader||e.defaultShader,state:i,size:6*t.particleChildren.length})}}class M extends P{constructor(e){super(e,new k)}}M.extension={type:[n.Ag.WebGPUPipes],name:"particle"},n.XO.add(F),n.XO.add(M)},1317:(e,t,r)=>{var n=r(8507),i=r(8734),s=r(975);class a extends i.U{constructor(){super(),this.geometry=new s.P}destroy(){this.geometry.destroy()}}class o{constructor(e){this._renderer=e}addRenderable(e,t){const r=this._getGpuSprite(e);e.didViewUpdate&&this._updateBatchableSprite(e,r),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuSprite(e);e.didViewUpdate&&this._updateBatchableSprite(e,t),t._batcher.updateElement(t)}validateRenderable(e){const t=this._getGpuSprite(e);return!t._batcher.checkAndUpdateTexture(t,e._texture)}_updateBatchableSprite(e,t){t.geometry.update(e),t.setTexture(e._texture)}_getGpuSprite(e){return e._gpuData[this._renderer.uid]||this._initGPUSprite(e)}_initGPUSprite(e){const t=e._gpuData[this._renderer.uid]=new a,r=t;return r.renderable=e,r.transform=e.groupTransform,r.texture=e._texture,r.roundPixels=this._renderer._roundPixels|e._roundPixels,e.didViewUpdate||this._updateBatchableSprite(e,r),t}destroy(){this._renderer=null}}o.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"nineSliceSprite"},n.XO.add(o)},8723:(e,t,r)=>{var n=r(8507),i=r(8639),s=r(7547),a=r(5099),o=r(2760),l=r(8734),u=r(5060),d=r(9313),h=r(5611),c=r(2067),p=r(6665),f=r(8475),g=r(5811),m=r(4492);const x={name:"tiling-bit",vertex:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        "},fragment:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            }\n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        "}},_={name:"tiling-bit",vertex:{header:"\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n\n        ",main:"\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        "},fragment:{header:"\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        ",main:"\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n\n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n\n        "}};let y,b;class S extends f.M{constructor(){y??(y=(0,h.v)({name:"tiling-sprite-shader",bits:[c.Ls,x,p.b]})),b??(b=(0,h.I)({name:"tiling-sprite-shader",bits:[c.mA,_,p.m]}));const e=new g.k({uMapCoord:{value:new d.u,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new d.u,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:b,gpuProgram:y,resources:{localUniforms:new g.k({uTransformMatrix:{value:new d.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:e,uTexture:m.g.EMPTY.source,uSampler:m.g.EMPTY.source.style}})}updateUniforms(e,t,r,n,i,s){const a=this.resources.tilingUniforms,o=s.width,l=s.height,u=s.textureMatrix,d=a.uniforms.uTextureTransform;d.set(r.a*o/e,r.b*o/t,r.c*l/e,r.d*l/t,r.tx/e,r.ty/t),d.invert(),a.uniforms.uMapCoord=u.mapCoord,a.uniforms.uClampFrame=u.uClampFrame,a.uniforms.uClampOffset=u.uClampOffset,a.uniforms.uTextureTransform=d,a.uniforms.uSizeAnchor[0]=e,a.uniforms.uSizeAnchor[1]=t,a.uniforms.uSizeAnchor[2]=n,a.uniforms.uSizeAnchor[3]=i,s&&(this.resources.uTexture=s.source,this.resources.uSampler=s.source.style)}}class w extends u.u{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}const v=new w;class T{constructor(){this.canBatch=!0,this.geometry=new u.u({indices:v.indices.slice(),positions:v.positions.slice(),uvs:v.uvs.slice()})}destroy(){this.geometry.destroy(),this.shader?.destroy()}}class C{constructor(e){this._state=s.U.default2d,this._renderer=e}validateRenderable(e){const t=this._getTilingSpriteData(e),r=t.canBatch;this._updateCanBatch(e);const n=t.canBatch;if(n&&n===r){const{batchableMesh:r}=t;return!r._batcher.checkAndUpdateTexture(r,e.texture)}return r!==n}addRenderable(e,t){const r=this._renderer.renderPipes.batch;this._updateCanBatch(e);const n=this._getTilingSpriteData(e),{geometry:i,canBatch:s}=n;if(s){n.batchableMesh||(n.batchableMesh=new l.U);const s=n.batchableMesh;e.didViewUpdate&&(this._updateBatchableMesh(e),s.geometry=i,s.renderable=e,s.transform=e.groupTransform,s.setTexture(e._texture)),s.roundPixels=this._renderer._roundPixels|e._roundPixels,r.addToBatch(s,t)}else r.break(t),n.shader||(n.shader=new S),this.updateRenderable(e),t.add(e)}execute(e){const{shader:t}=this._getTilingSpriteData(e);t.groups[0]=this._renderer.globalUniforms.bindGroup;const r=t.resources.localUniforms.uniforms;r.uTransformMatrix=e.groupTransform,r.uRound=this._renderer._roundPixels|e._roundPixels,(0,o.V)(e.groupColorAlpha,r.uColor,0),this._state.blendMode=(0,i.i)(e.groupBlendMode,e.texture._source),this._renderer.encoder.draw({geometry:v,shader:t,state:this._state})}updateRenderable(e){const t=this._getTilingSpriteData(e),{canBatch:r}=t;if(r){const{batchableMesh:r}=t;e.didViewUpdate&&this._updateBatchableMesh(e),r._batcher.updateElement(r)}else if(e.didViewUpdate){const{shader:r}=t;r.updateUniforms(e.width,e.height,e._tileTransform.matrix,e.anchor.x,e.anchor.y,e.texture)}}_getTilingSpriteData(e){return e._gpuData[this._renderer.uid]||this._initTilingSpriteData(e)}_initTilingSpriteData(e){const t=new T;return t.renderable=e,e._gpuData[this._renderer.uid]=t,t}_updateBatchableMesh(e){const t=this._getTilingSpriteData(e),{geometry:r}=t,n=e.texture.source.style;"repeat"!==n.addressMode&&(n.addressMode="repeat",n.update()),function(e,t){const r=e.texture,n=r.frame.width,i=r.frame.height;let s=0,a=0;e.applyAnchorToTexture&&(s=e.anchor.x,a=e.anchor.y),t[0]=t[6]=-s,t[2]=t[4]=1-s,t[1]=t[3]=-a,t[5]=t[7]=1-a;const o=d.u.shared;o.copyFrom(e._tileTransform.matrix),o.tx/=e.width,o.ty/=e.height,o.invert(),o.scale(e.width/n,e.height/i),function(e,t,r,n){let i=0;const s=e.length/2,a=n.a,o=n.b,l=n.c,u=n.d,d=n.tx,h=n.ty;for(r*=2;i<s;){const t=e[r],n=e[r+1];e[r]=a*t+l*n+d,e[r+1]=o*t+u*n+h,r+=2,i++}}(t,0,0,o)}(e,r.uvs),function(e,t){const r=e.anchor.x,n=e.anchor.y;t[0]=-r*e.width,t[1]=-n*e.height,t[2]=(1-r)*e.width,t[3]=-n*e.height,t[4]=(1-r)*e.width,t[5]=(1-n)*e.height,t[6]=-r*e.width,t[7]=(1-n)*e.height}(e,r.positions)}destroy(){this._renderer=null}_updateCanBatch(e){const t=this._getTilingSpriteData(e),r=e.texture;let n=!0;return this._renderer.type===a.W.WEBGL&&(n=this._renderer.context.supports.nonPowOf2wrapping),t.canBatch=r.textureMatrix.isSimple&&(n||r.source.isPowerOfTwo),t.canBatch}}C.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"tilingSprite"},n.XO.add(C)},8422:(e,t,r)=>{r.d(t,{K:()=>n});class n{constructor(){this.batcherName="default",this.topology="triangle-list",this.attributeSize=4,this.indexSize=6,this.packAsQuad=!0,this.roundPixels=0,this._attributeStart=0,this._batcher=null,this._batch=null}get blendMode(){return this.renderable.groupBlendMode}get color(){return this.renderable.groupColorAlpha}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.bounds=null}destroy(){}}},23:(e,t,r)=>{var n=r(8507),i=r(1979),s=r(9408),a=r(4016),o=r(9313),l=r(5611),u=r(4459),d=r(4e3),h=r(6665),c=r(6040),p=r(8475),f=r(5811);const g={name:"local-uniform-msdf-bit",vertex:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "},fragment:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         ",main:"\n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        "}},m={name:"local-uniform-msdf-bit",vertex:{header:"\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "},fragment:{header:"\n            uniform float uDistance;\n         ",main:"\n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        "}},x={name:"msdf-bit",fragment:{header:"\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n\n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n\n            }\n        "}},_={name:"msdf-bit",fragment:{header:"\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n\n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n            }\n        "}};let y,b;class S extends p.M{constructor(e){const t=new f.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new o.u,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}});y??(y=(0,l.v)({name:"sdf-shader",bits:[u.F,(0,d._)(e),g,x,h.b]})),b??(b=(0,l.I)({name:"sdf-shader",bits:[u.a,(0,d.P)(e),m,_,h.m]})),super({glProgram:b,gpuProgram:y,resources:{localUniforms:t,batchSamplers:(0,c.n)(e)}})}}var w=r(4670),v=r(268),T=r(9690),C=r(2577),P=r(9252),F=r(7608),k=r(8293),M=r(4492),A=r(218),B=r(1242),R=r(3548),U=r(8875);class z extends U.A{constructor(){super(...arguments),this.chars=Object.create(null),this.lineHeight=0,this.fontFamily="",this.fontMetrics={fontSize:0,ascent:0,descent:0},this.baseLineOffset=0,this.distanceField={type:"none",range:0},this.pages=[],this.applyFillAsTint=!0,this.baseMeasurementFontSize=100,this.baseRenderedFontSize=100}get font(){return(0,w.t6)(w.lj,"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead."),this.fontFamily}get pageTextures(){return(0,w.t6)(w.lj,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}get size(){return(0,w.t6)(w.lj,"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead."),this.fontMetrics.fontSize}get distanceFieldRange(){return(0,w.t6)(w.lj,"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead."),this.distanceField.range}get distanceFieldType(){return(0,w.t6)(w.lj,"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead."),this.distanceField.type}destroy(e=!1){this.emit("destroy",this),this.removeAllListeners();for(const e in this.chars)this.chars[e].texture?.destroy();this.chars=null,e&&(this.pages.forEach((e=>e.texture.destroy(!0))),this.pages=null)}}const G=class e extends z{constructor(t){super(),this.resolution=1,this.pages=[],this._padding=0,this._measureCache=Object.create(null),this._currentChars=[],this._currentX=0,this._currentY=0,this._currentMaxCharHeight=0,this._currentPageIndex=-1,this._skipKerning=!1;const r={...e.defaultOptions,...t};this._textureSize=r.textureSize,this._mipmap=r.mipmap;const n=r.style.clone();r.overrideFill&&(n._fill.color=16777215,n._fill.alpha=1,n._fill.texture=M.g.WHITE,n._fill.fill=null),this.applyFillAsTint=r.overrideFill;const i=n.fontSize;n.fontSize=this.baseMeasurementFontSize;const s=(0,B.Z)(n);r.overrideSize?n._stroke&&(n._stroke.width*=this.baseRenderedFontSize/i):n.fontSize=this.baseRenderedFontSize=i,this._style=n,this._skipKerning=r.skipKerning??!1,this.resolution=r.resolution??1,this._padding=r.padding??4,r.textureStyle&&(this._textureStyle=r.textureStyle instanceof A.n?r.textureStyle:new A.n(r.textureStyle)),this.fontMetrics=a.P.measureFont(s),this.lineHeight=n.lineHeight||this.fontMetrics.fontSize||n.fontSize}ensureCharacters(e){const t=a.P.graphemeSegmenter(e).filter((e=>!this._currentChars.includes(e))).filter(((e,t,r)=>r.indexOf(e)===t));if(!t.length)return;let r;this._currentChars=[...this._currentChars,...t],r=-1===this._currentPageIndex?this._nextPage():this.pages[this._currentPageIndex];let{canvas:n,context:i}=r.canvasAndContext,s=r.texture.source;const o=this._style;let l=this._currentX,u=this._currentY,d=this._currentMaxCharHeight;const h=this.baseRenderedFontSize/this.baseMeasurementFontSize,c=this._padding*h;let p=!1;const f=n.width/this.resolution,g=n.height/this.resolution;for(let e=0;e<t.length;e++){const r=t[e],m=a.P.measureText(r,o,n,!1);m.lineHeight=m.height;const x=m.width*h,_=Math.ceil(("italic"===o.fontStyle?2:1)*x)+2*c,y=m.height*h+2*c;if(p=!1,"\n"!==r&&"\r"!==r&&"\t"!==r&&" "!==r&&(p=!0,d=Math.ceil(Math.max(y,d))),l+_>f&&(u+=d,d=y,l=0,u+d>g)){s.update();const e=this._nextPage();n=e.canvasAndContext.canvas,i=e.canvasAndContext.context,s=e.texture.source,l=0,u=0,d=0}const b=x/h-(o.dropShadow?.distance??0)-(o._stroke?.width??0);if(this.chars[r]={id:r.codePointAt(0),xOffset:-this._padding,yOffset:-this._padding,xAdvance:b,kerning:{}},p){this._drawGlyph(i,m,l+c,u+c,h,o);const e=s.width*h,t=s.height*h,n=new P.M(l/e*s.width,u/t*s.height,_/e*s.width,y/t*s.height);this.chars[r].texture=new M.g({source:s,frame:n}),l+=Math.ceil(_)}}s.update(),this._currentX=l,this._currentY=u,this._currentMaxCharHeight=d,this._skipKerning&&this._applyKerning(t,i)}get pageTextures(){return(0,w.t6)(w.lj,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}_applyKerning(e,t){const r=this._measureCache;for(let n=0;n<e.length;n++){const i=e[n];for(let e=0;e<this._currentChars.length;e++){const n=this._currentChars[e];let s=r[i];s||(s=r[i]=t.measureText(i).width);let a=r[n];a||(a=r[n]=t.measureText(n).width);let o=t.measureText(i+n).width,l=o-(s+a);l&&(this.chars[i].kerning[n]=l),o=t.measureText(i+n).width,l=o-(s+a),l&&(this.chars[n].kerning[i]=l)}}}_nextPage(){this._currentPageIndex++;const e=this.resolution,t=F.N.getOptimalCanvasAndContext(this._textureSize,this._textureSize,e);this._setupContext(t.context,this._style,e);const r=e*(this.baseRenderedFontSize/this.baseMeasurementFontSize),n=new M.g({source:new k.b({resource:t.canvas,resolution:r,alphaMode:"premultiply-alpha-on-upload",autoGenerateMipmaps:this._mipmap})});this._textureStyle&&(n.source.style=this._textureStyle);const i={canvasAndContext:t,texture:n};return this.pages[this._currentPageIndex]=i,i}_setupContext(e,t,r){t.fontSize=this.baseRenderedFontSize,e.scale(r,r),e.font=(0,B.Z)(t),t.fontSize=this.baseMeasurementFontSize,e.textBaseline=t.textBaseline;const n=t._stroke,i=n?.width??0;if(n&&(e.lineWidth=i,e.lineJoin=n.join,e.miterLimit=n.miterLimit,e.strokeStyle=(0,R.r)(n,e)),t._fill&&(e.fillStyle=(0,R.r)(t._fill,e)),t.dropShadow){const n=t.dropShadow,i=C.Q.shared.setValue(n.color).toArray(),s=n.blur*r,a=n.distance*r;e.shadowColor=`rgba(${255*i[0]},${255*i[1]},${255*i[2]},${n.alpha})`,e.shadowBlur=s,e.shadowOffsetX=Math.cos(n.angle)*a,e.shadowOffsetY=Math.sin(n.angle)*a}else e.shadowColor="black",e.shadowBlur=0,e.shadowOffsetX=0,e.shadowOffsetY=0}_drawGlyph(e,t,r,n,i,s){const a=t.text,o=t.fontProperties,l=s._stroke,u=(l?.width??0)*i,d=r+u/2,h=n-u/2,c=o.descent*i,p=t.lineHeight*i;let f=!1;s.stroke&&u&&(f=!0,e.strokeText(a,d,h+p-c));const{shadowBlur:g,shadowOffsetX:m,shadowOffsetY:x}=e;s._fill&&(f&&(e.shadowBlur=0,e.shadowOffsetX=0,e.shadowOffsetY=0),e.fillText(a,d,h+p-c)),f&&(e.shadowBlur=g,e.shadowOffsetX=m,e.shadowOffsetY=x)}destroy(){super.destroy();for(let e=0;e<this.pages.length;e++){const{canvasAndContext:t,texture:r}=this.pages[e];F.N.returnCanvasAndContext(t),r.destroy(!0)}this.pages=null}};G.defaultOptions={textureSize:512,style:new T.x,mipmap:!0};let W=G;function D(e,t,r,n){const i={width:0,height:0,offsetY:0,scale:t.fontSize/r.baseMeasurementFontSize,lines:[{width:0,charPositions:[],spaceWidth:0,spacesIndex:[],chars:[]}]};i.offsetY=r.baseLineOffset;let s=i.lines[0],a=null,o=!0;const l={spaceWord:!1,width:0,start:0,index:0,positions:[],chars:[]},u=r.baseMeasurementFontSize/t.fontSize,d=t.letterSpacing*u,h=t.wordWrapWidth*u,c=t.lineHeight?t.lineHeight*u:r.lineHeight,p=t.wordWrap&&t.breakWords,f=e=>{const t=s.width;for(let r=0;r<l.index;r++){const n=e.positions[r];s.chars.push(e.chars[r]),s.charPositions.push(n+t)}s.width+=e.width,o=!1,l.width=0,l.index=0,l.chars.length=0},g=()=>{let e=s.chars.length-1;if(n){let t=s.chars[e];for(;" "===t;)s.width-=r.chars[t].xAdvance,t=s.chars[--e]}i.width=Math.max(i.width,s.width),s={width:0,charPositions:[],chars:[],spaceWidth:0,spacesIndex:[]},o=!0,i.lines.push(s),i.height+=c},m=e=>e-d>h;for(let n=0;n<e.length+1;n++){let i;const u=n===e.length;u||(i=e[n]);const h=r.chars[i]||r.chars[" "];if(/(?:\s)/.test(i)||"\r"===i||"\n"===i||u){if(!o&&t.wordWrap&&m(s.width+l.width)?(g(),f(l),u||s.charPositions.push(0)):(l.start=s.width,f(l),u||s.charPositions.push(0)),"\r"===i||"\n"===i)0!==s.width&&g();else if(!u){const e=h.xAdvance+(h.kerning[a]||0)+d;s.width+=e,s.spaceWidth=e,s.spacesIndex.push(s.charPositions.length),s.chars.push(i)}}else{const e=h.kerning[a]||0,t=h.xAdvance+e+d;p&&m(s.width+l.width+t)&&(f(l),g()),l.positions[l.index++]=l.width+e,l.chars.push(i),l.width+=t}a=i}return g(),"center"===t.align?function(e){for(let t=0;t<e.lines.length;t++){const r=e.lines[t],n=e.width/2-r.width/2;for(let e=0;e<r.charPositions.length;e++)r.charPositions[e]+=n}}(i):"right"===t.align?function(e){for(let t=0;t<e.lines.length;t++){const r=e.lines[t],n=e.width-r.width;for(let e=0;e<r.charPositions.length;e++)r.charPositions[e]+=n}}(i):"justify"===t.align&&function(e){const t=e.width;for(let r=0;r<e.lines.length;r++){const n=e.lines[r];let i=0,s=n.spacesIndex[i++],a=0;const o=n.spacesIndex.length,l=(t-n.width)/o;for(let e=0;e<n.charPositions.length;e++)e===s&&(s=n.spacesIndex[i++],a+=l),n.charPositions[e]+=a}}(i),i}let O=0;const L=new class{constructor(){this.ALPHA=[["a","z"],["A","Z"]," "],this.NUMERIC=[["0","9"]],this.ALPHANUMERIC=[["a","z"],["A","Z"],["0","9"]," "],this.ASCII=[[" ","~"]],this.defaultOptions={chars:this.ALPHANUMERIC,resolution:1,padding:4,skipKerning:!1,textureStyle:null}}getFont(e,t){let r=`${t.fontFamily}-bitmap`,n=!0;if(t._fill.fill&&!t._stroke)r+=t._fill.fill.styleKey,n=!1;else if(t._stroke||t.dropShadow){let e=t.styleKey;e=e.substring(0,e.lastIndexOf("-")),r=`${e}-bitmap`,n=!1}if(!i.l.has(r)){const e=Object.create(t);e.lineHeight=0;const s=new W({style:e,overrideFill:n,overrideSize:!0,...this.defaultOptions});O++,O>50&&(0,v.R)("BitmapText",`You have dynamically created ${O} bitmap fonts, this can be inefficient. Try pre installing your font styles using \`BitmapFont.install({name:"style1", style})\``),s.once("destroy",(()=>{O--,i.l.remove(r)})),i.l.set(r,s)}const s=i.l.get(r);return s.ensureCharacters?.(e),s}getLayout(e,t,r=!0){const n=this.getFont(e,t);return D(a.P.graphemeSegmenter(e),t,n,r)}measureText(e,t,r=!0){return this.getLayout(e,t,r)}install(...e){let t=e[0];"string"==typeof t&&(t={name:t,style:e[1],chars:e[2]?.chars,resolution:e[2]?.resolution,padding:e[2]?.padding,skipKerning:e[2]?.skipKerning},(0,w.t6)(w.lj,"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})"));const r=t?.name;if(!r)throw new Error("[BitmapFontManager] Property `name` is required.");t={...this.defaultOptions,...t};const n=t.style,s=n instanceof T.x?n:new T.x(n),a=t.dynamicFill??this._canUseTintForStyle(s),o=new W({style:s,overrideFill:a,skipKerning:t.skipKerning,padding:t.padding,resolution:t.resolution,overrideSize:!1,textureStyle:t.textureStyle}),l=function(e){if(""===e)return[];"string"==typeof e&&(e=[e]);const t=[];for(let r=0,n=e.length;r<n;r++){const n=e[r];if(Array.isArray(n)){if(2!==n.length)throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${n.length}.`);if(0===n[0].length||0===n[1].length)throw new Error("[BitmapFont]: Invalid character delimiter.");const e=n[0].charCodeAt(0),r=n[1].charCodeAt(0);if(r<e)throw new Error("[BitmapFont]: Invalid character range.");for(let n=e,i=r;n<=i;n++)t.push(String.fromCharCode(n))}else t.push(...Array.from(n))}if(0===t.length)throw new Error("[BitmapFont]: Empty set when resolving characters.");return t}(t.chars);return o.ensureCharacters(l.join("")),i.l.set(`${r}-bitmap`,o),o.once("destroy",(()=>i.l.remove(`${r}-bitmap`))),o}uninstall(e){const t=`${e}-bitmap`,r=i.l.get(t);r&&r.destroy()}_canUseTintForStyle(e){return!(e._stroke||e.dropShadow&&0!==e.dropShadow.color||e._fill.fill||16777215!==e._fill.color)}};class I extends s.A{destroy(){this.context.customShader&&this.context.customShader.destroy(),super.destroy()}}class E{constructor(e){this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuBitmapText")}validateRenderable(e){const t=this._getGpuBitmapText(e);return this._renderer.renderPipes.graphics.validateRenderable(t)}addRenderable(e,t){const r=this._getGpuBitmapText(e);V(e,r),e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,r)),this._renderer.renderPipes.graphics.addRenderable(r,t),r.context.customShader&&this._updateDistanceField(e)}updateRenderable(e){const t=this._getGpuBitmapText(e);V(e,t),this._renderer.renderPipes.graphics.updateRenderable(t),t.context.customShader&&this._updateDistanceField(e)}_updateContext(e,t){const{context:r}=t,n=L.getFont(e.text,e._style);r.clear(),"none"!==n.distanceField.type&&(r.customShader||(r.customShader=new S(this._renderer.limits.maxBatchableTextures)));const i=a.P.graphemeSegmenter(e.text),s=e._style;let o=n.baseLineOffset;const l=D(i,s,n,!0),u=s.padding,d=l.scale;let h=l.width,c=l.height+l.offsetY;s._stroke&&(h+=s._stroke.width/d,c+=s._stroke.width/d),r.translate(-e._anchor._x*h-u,-e._anchor._y*c-u).scale(d,d);const p=n.applyFillAsTint?s._fill.color:16777215;let f=n.fontMetrics.fontSize,g=n.lineHeight;s.lineHeight&&(f=s.fontSize/d,g=s.lineHeight/d);let m=(g-f)/2;m-n.baseLineOffset<0&&(m=0);for(let e=0;e<l.lines.length;e++){const t=l.lines[e];for(let e=0;e<t.charPositions.length;e++){const i=t.chars[e],s=n.chars[i];if(s?.texture){const n=s.texture;r.texture(n,p||"black",Math.round(t.charPositions[e]+s.xOffset),Math.round(o+s.yOffset+m),n.orig.width,n.orig.height)}}o+=g}}_getGpuBitmapText(e){return e._gpuData[this._renderer.uid]||this.initGpuText(e)}initGpuText(e){const t=new I;return e._gpuData[this._renderer.uid]=t,this._updateContext(e,t),t}_updateDistanceField(e){const t=this._getGpuBitmapText(e).context,r=e._style.fontFamily,n=i.l.get(`${r}-bitmap`),{a:s,b:a,c:o,d:l}=e.groupTransform,u=Math.sqrt(s*s+a*a),d=Math.sqrt(o*o+l*l),h=(Math.abs(u)+Math.abs(d))/2,c=n.baseRenderedFontSize/e._style.fontSize,p=h*n.distanceField.range*(1/c);t.customShader.resources.localUniforms.uniforms.uDistance=p}destroy(){this._renderer=null}}function V(e,t){t.groupTransform=e.groupTransform,t.groupColorAlpha=e.groupColorAlpha,t.groupColor=e.groupColor,t.groupBlendMode=e.groupBlendMode,t.globalDisplayStatus=e.globalDisplayStatus,t.groupTransform=e.groupTransform,t.localDisplayStatus=e.localDisplayStatus,t.groupAlpha=e.groupAlpha,t._roundPixels=e._roundPixels}E.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"bitmapText"},n.XO.add(E)},2623:(e,t,r)=>{var n=r(8507),i=r(4492),s=r(2289),a=r(8422);class o extends a.K{constructor(e){super(),this.generatingTexture=!1,this._renderer=e,e.runners.resolutionChange.add(this)}resolutionChange(){const e=this.renderable;e._autoResolution&&e.onViewUpdate()}destroy(){this._renderer.htmlText.returnTexturePromise(this.texturePromise),this.texturePromise=null,this._renderer=null}}class l{constructor(e){this._renderer=e}validateRenderable(e){return e._didTextUpdate}addRenderable(e,t){const r=this._getGpuText(e);e._didTextUpdate&&(this._updateGpuText(e).catch((e=>{console.error(e)})),e._didTextUpdate=!1,(0,s.s)(r,e)),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuText(e);t._batcher.updateElement(t)}async _updateGpuText(e){e._didTextUpdate=!1;const t=this._getGpuText(e);if(t.generatingTexture)return;t.texturePromise&&(this._renderer.htmlText.returnTexturePromise(t.texturePromise),t.texturePromise=null),t.generatingTexture=!0,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution;const r=this._renderer.htmlText.getTexturePromise(e);t.texturePromise=r,t.texture=await r;const n=e.renderGroup||e.parentRenderGroup;n&&(n.structureDidChange=!0),t.generatingTexture=!1,(0,s.s)(t,e)}_getGpuText(e){return e._gpuData[this._renderer.uid]||this.initGpuText(e)}initGpuText(e){const t=new o(this._renderer);return t.renderable=e,t.transform=e.groupTransform,t.texture=i.g.EMPTY,t.bounds={minX:0,maxX:1,minY:0,maxY:0},t.roundPixels=this._renderer._roundPixels|e._roundPixels,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,e._gpuData[this._renderer.uid]=t,t}destroy(){this._renderer=null}}l.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"htmlText"};var u=r(7608),d=r(2437),h=r(5099),c=r(1761),p=r(268),f=r(8218),g=r(2558);const m="http://www.w3.org/2000/svg",x="http://www.w3.org/1999/xhtml";class _{constructor(){this.svgRoot=document.createElementNS(m,"svg"),this.foreignObject=document.createElementNS(m,"foreignObject"),this.domElement=document.createElementNS(x,"div"),this.styleElement=document.createElementNS(x,"style");const{foreignObject:e,svgRoot:t,styleElement:r,domElement:n}=this;e.setAttribute("width","10000"),e.setAttribute("height","10000"),e.style.overflow="hidden",t.appendChild(e),e.appendChild(r),e.appendChild(n),this.image=c.e.get().createImage()}}var y=r(1979);const b=new Map;let S;class w{constructor(e){this._renderer=e,this._createCanvas=e.type===h.W.WEBGPU}getTexture(e){return this.getTexturePromise(e)}getTexturePromise(e){return this._buildTexturePromise(e)}async _buildTexturePromise(e){const{text:t,style:r,resolution:n,textureStyle:i}=e,s=f.Z.get(_),a=function(e,t){const r=t.fontFamily,n=[],i={},s=e.match(/font-family:([^;"\s]+)/g);function a(e){i[e]||(n.push(e),i[e]=!0)}if(Array.isArray(r))for(let e=0;e<r.length;e++)a(r[e]);else a(r);s&&s.forEach((e=>{a(e.split(":")[1].trim())}));for(const e in t.tagStyles)a(t.tagStyles[e].fontFamily);return n}(t,r),o=await async function(e){const t=e.filter((e=>y.l.has(`${e}-and-url`))).map((e=>{if(!b.has(e)){const{entries:t}=y.l.get(`${e}-and-url`),r=[];t.forEach((t=>{const n=t.url,i=t.faces.map((e=>({weight:e.weight,style:e.style})));r.push(...i.map((t=>async function(e,t){const r=await async function(e){const t=await c.e.get().fetch(e),r=await t.blob(),n=new FileReader;return await new Promise(((e,t)=>{n.onloadend=()=>e(n.result),n.onerror=t,n.readAsDataURL(r)}))}(t);return`@font-face {\n        font-family: "${e.fontFamily}";\n        font-weight: ${e.fontWeight};\n        font-style: ${e.fontStyle};\n        src: url('${r}');\n    }`}({fontWeight:t.weight,fontStyle:t.style,fontFamily:e},n))))})),b.set(e,Promise.all(r).then((e=>e.join("\n"))))}return b.get(e)}));return(await Promise.all(t)).join("\n")}(a),l=function(e,t,r,n){n||(n=S||(S=new _));const{domElement:i,styleElement:s,svgRoot:a}=n;i.innerHTML=`<style>${t.cssStyle};</style><div style='padding:0'>${e}</div>`,i.setAttribute("style","transform-origin: top left; display: inline-block"),r&&(s.textContent=r),document.body.appendChild(a);const o=i.getBoundingClientRect();a.remove();const l=2*t.padding;return{width:o.width-l,height:o.height-l}}(t,r,o,s),d=Math.ceil(Math.ceil(Math.max(1,l.width)+2*r.padding)*n),h=Math.ceil(Math.ceil(Math.max(1,l.height)+2*r.padding)*n),p=s.image;p.width=2+(0|d),p.height=2+(0|h);const m=function(e,t,r,n,i){const{domElement:s,styleElement:a,svgRoot:o}=i;s.innerHTML=`<style>${t.cssStyle}</style><div style='padding:0;'>${e}</div>`,s.setAttribute("style",`transform: scale(${r});transform-origin: top left; display: inline-block`),a.textContent=n;const{width:l,height:u}=i.image;return o.setAttribute("width",l.toString()),o.setAttribute("height",u.toString()),(new XMLSerializer).serializeToString(o)}(t,r,n,o,s);await function(e,t,r){return new Promise((async n=>{r&&await new Promise((e=>setTimeout(e,100))),e.onload=()=>{n()},e.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(t)}`,e.crossOrigin="anonymous"}))}(p,m,function(){const{userAgent:e}=c.e.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(e)}()&&a.length>0);const x=p;let w;this._createCanvas&&(w=function(e,t){const r=u.N.getOptimalCanvasAndContext(e.width,e.height,t),{context:n}=r;return n.clearRect(0,0,e.width,e.height),n.drawImage(e,0,0),r}(p,n));const v=(0,g.M)(w?w.canvas:x,p.width-2,p.height-2,n);return i&&(v.source.style=i),this._createCanvas&&(this._renderer.texture.initSource(v.source),u.N.returnCanvasAndContext(w)),f.Z.return(s),v}returnTexturePromise(e){e.then((e=>{this._cleanUp(e)})).catch((()=>{(0,p.R)("HTMLTextSystem: Failed to clean texture")}))}_cleanUp(e){d.W.returnTexture(e,!0),e.source.resource=null,e.source.uploadMethodId="unknown"}destroy(){this._renderer=null}}w.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem,n.Ag.CanvasSystem],name:"htmlText"},n.XO.add(w),n.XO.add(l)},9690:(e,t,r)=>{r.d(t,{x:()=>f});var n=r(8875),i=r(2577),s=r(4670),a=r(268),o=r(7276),l=r(2806),u=r(5997),d=r(990);const h=["align","breakWords","cssOverrides","fontVariant","fontWeight","leading","letterSpacing","lineHeight","padding","textBaseline","trim","whiteSpace","wordWrap","wordWrapWidth","fontFamily","fontStyle","fontSize"];function c(e,t,r){return e?(t[r++]=e.color,t[r++]=e.alpha,t[r++]=e.fill?.styleKey,r):r}const p=class e extends n.A{constructor(t={}){super(),function(e){const t=e;if("boolean"==typeof t.dropShadow&&t.dropShadow){const r=f.defaultDropShadow;e.dropShadow={alpha:t.dropShadowAlpha??r.alpha,angle:t.dropShadowAngle??r.angle,blur:t.dropShadowBlur??r.blur,color:t.dropShadowColor??r.color,distance:t.dropShadowDistance??r.distance}}if(void 0!==t.strokeThickness){(0,s.t6)(s.lj,"strokeThickness is now a part of stroke");const r=t.stroke;let n={};if(i.Q.isColorLike(r))n.color=r;else if(r instanceof o._||r instanceof l.m)n.fill=r;else{if(!Object.hasOwnProperty.call(r,"color")&&!Object.hasOwnProperty.call(r,"fill"))throw new Error("Invalid stroke value.");n=r}e.stroke={...n,width:t.strokeThickness}}if(Array.isArray(t.fillGradientStops)){if((0,s.t6)(s.lj,"gradient fill is now a fill pattern: `new FillGradient(...)`"),!Array.isArray(t.fill)||0===t.fill.length)throw new Error("Invalid fill value. Expected an array of colors for gradient fill.");t.fill.length!==t.fillGradientStops.length&&(0,a.R)("The number of fill colors must match the number of fill gradient stops.");const r=new o._({start:{x:0,y:0},end:{x:0,y:1},textureSpace:"local"}),n=t.fillGradientStops.slice(),l=t.fill.map((e=>i.Q.shared.setValue(e).toNumber()));n.forEach(((e,t)=>{r.addColorStop(e,l[t])})),e.fill={fill:r}}}(t);const r={...e.defaultTextStyle,...t};for(const e in r)this[e]=r[e];this.update()}get align(){return this._align}set align(e){this._align=e,this.update()}get breakWords(){return this._breakWords}set breakWords(e){this._breakWords=e,this.update()}get dropShadow(){return this._dropShadow}set dropShadow(t){this._dropShadow=null!==t&&"object"==typeof t?this._createProxy({...e.defaultDropShadow,...t}):t?this._createProxy({...e.defaultDropShadow}):null,this.update()}get fontFamily(){return this._fontFamily}set fontFamily(e){this._fontFamily=e,this.update()}get fontSize(){return this._fontSize}set fontSize(e){this._fontSize="string"==typeof e?parseInt(e,10):e,this.update()}get fontStyle(){return this._fontStyle}set fontStyle(e){this._fontStyle=e.toLowerCase(),this.update()}get fontVariant(){return this._fontVariant}set fontVariant(e){this._fontVariant=e,this.update()}get fontWeight(){return this._fontWeight}set fontWeight(e){this._fontWeight=e,this.update()}get leading(){return this._leading}set leading(e){this._leading=e,this.update()}get letterSpacing(){return this._letterSpacing}set letterSpacing(e){this._letterSpacing=e,this.update()}get lineHeight(){return this._lineHeight}set lineHeight(e){this._lineHeight=e,this.update()}get padding(){return this._padding}set padding(e){this._padding=e,this.update()}get filters(){return this._filters}set filters(e){this._filters=e,this.update()}get trim(){return this._trim}set trim(e){this._trim=e,this.update()}get textBaseline(){return this._textBaseline}set textBaseline(e){this._textBaseline=e,this.update()}get whiteSpace(){return this._whiteSpace}set whiteSpace(e){this._whiteSpace=e,this.update()}get wordWrap(){return this._wordWrap}set wordWrap(e){this._wordWrap=e,this.update()}get wordWrapWidth(){return this._wordWrapWidth}set wordWrapWidth(e){this._wordWrapWidth=e,this.update()}get fill(){return this._originalFill}set fill(e){e!==this._originalFill&&(this._originalFill=e,this._isFillStyle(e)&&(this._originalFill=this._createProxy({...u.T.defaultFillStyle,...e},(()=>{this._fill=(0,d.w)({...this._originalFill},u.T.defaultFillStyle)}))),this._fill=(0,d.w)(0===e?"black":e,u.T.defaultFillStyle),this.update())}get stroke(){return this._originalStroke}set stroke(e){e!==this._originalStroke&&(this._originalStroke=e,this._isFillStyle(e)&&(this._originalStroke=this._createProxy({...u.T.defaultStrokeStyle,...e},(()=>{this._stroke=(0,d.T)({...this._originalStroke},u.T.defaultStrokeStyle)}))),this._stroke=(0,d.T)(e,u.T.defaultStrokeStyle),this.update())}_generateKey(){return this._styleKey=function(e){const t=[];let r=0;for(let n=0;n<h.length;n++){const i=`_${h[n]}`;t[r++]=e[i]}return r=c(e._fill,t,r),r=function(e,t,r){return e?(r=c(e,t,r),t[r++]=e.width,t[r++]=e.alignment,t[r++]=e.cap,t[r++]=e.join,t[r++]=e.miterLimit,r):r}(e._stroke,t,r),r=function(e,t,r){return e?(t[r++]=e.alpha,t[r++]=e.angle,t[r++]=e.blur,t[r++]=e.distance,t[r++]=i.Q.shared.setValue(e.color).toNumber(),r):r}(e.dropShadow,t,r),r=function(e,t,r){if(!e)return r;for(const n of e)t[r++]=n.uid;return r}(e.filters,t,r),t.join("-")}(this),this._styleKey}update(){this._styleKey=null,this.emit("update",this)}reset(){const t=e.defaultTextStyle;for(const e in t)this[e]=t[e]}get styleKey(){return this._styleKey||this._generateKey()}clone(){return new e({align:this.align,breakWords:this.breakWords,dropShadow:this._dropShadow?{...this._dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,leading:this.leading,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,textBaseline:this.textBaseline,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth,filters:this._filters?[...this._filters]:void 0})}_getFinalPadding(){let e=0;if(this._filters)for(let t=0;t<this._filters.length;t++)e+=this._filters[t].padding;return Math.max(this._padding,e)}destroy(e=!1){if(this.removeAllListeners(),"boolean"==typeof e?e:e?.texture){const t="boolean"==typeof e?e:e?.textureSource;this._fill?.texture&&this._fill.texture.destroy(t),this._originalFill?.texture&&this._originalFill.texture.destroy(t),this._stroke?.texture&&this._stroke.texture.destroy(t),this._originalStroke?.texture&&this._originalStroke.texture.destroy(t)}this._fill=null,this._stroke=null,this.dropShadow=null,this._originalStroke=null,this._originalFill=null}_createProxy(e,t){return new Proxy(e,{set:(e,r,n)=>(e[r]=n,t?.(r,n),this.update(),!0)})}_isFillStyle(e){return null!==(e??null)&&!(i.Q.isColorLike(e)||e instanceof o._||e instanceof l.m)}};p.defaultDropShadow={alpha:1,angle:Math.PI/6,blur:0,color:"black",distance:5},p.defaultTextStyle={align:"left",breakWords:!1,dropShadow:null,fill:"black",fontFamily:"Arial",fontSize:26,fontStyle:"normal",fontVariant:"normal",fontWeight:"normal",leading:0,letterSpacing:0,lineHeight:0,padding:0,stroke:null,textBaseline:"alphabetic",trim:!1,whiteSpace:"pre",wordWrap:!1,wordWrapWidth:100};let f=p},4016:(e,t,r)=>{r.d(t,{P:()=>o});var n=r(1761),i=r(1242);const s={willReadFrequently:!0},a=class e{static get experimentalLetterSpacingSupported(){let t=e._experimentalLetterSpacingSupported;if(void 0===t){const r=n.e.get().getCanvasRenderingContext2D().prototype;t=e._experimentalLetterSpacingSupported="letterSpacing"in r||"textLetterSpacing"in r}return t}constructor(e,t,r,n,i,s,a,o,l){this.text=e,this.style=t,this.width=r,this.height=n,this.lines=i,this.lineWidths=s,this.lineHeight=a,this.maxLineWidth=o,this.fontProperties=l}static measureText(t=" ",r,n=e._canvas,s=r.wordWrap){const a=(0,i.Z)(r),o=e.measureFont(a);0===o.fontSize&&(o.fontSize=r.fontSize,o.ascent=r.fontSize);const l=e.__context;l.font=a;const u=(s?e._wordWrap(t,r,n):t).split(/(?:\r\n|\r|\n)/),d=new Array(u.length);let h=0;for(let t=0;t<u.length;t++){const n=e._measureText(u[t],r.letterSpacing,l);d[t]=n,h=Math.max(h,n)}const c=r._stroke?.width||0;let p=h+c;r.dropShadow&&(p+=r.dropShadow.distance);const f=r.lineHeight||o.fontSize;let g=Math.max(f,o.fontSize+c)+(u.length-1)*(f+r.leading);return r.dropShadow&&(g+=r.dropShadow.distance),new e(t,r,p,g,u,d,f+r.leading,h,o)}static _measureText(t,r,n){let i=!1;e.experimentalLetterSpacingSupported&&(e.experimentalLetterSpacing?(n.letterSpacing=`${r}px`,n.textLetterSpacing=`${r}px`,i=!0):(n.letterSpacing="0px",n.textLetterSpacing="0px"));const s=n.measureText(t);let a=s.width;const o=-s.actualBoundingBoxLeft;let l=s.actualBoundingBoxRight-o;if(a>0)if(i)a-=r,l-=r;else{const n=(e.graphemeSegmenter(t).length-1)*r;a+=n,l+=n}return Math.max(a,l)}static _wordWrap(t,r,n=e._canvas){const i=n.getContext("2d",s);let a=0,o="",l="";const u=Object.create(null),{letterSpacing:d,whiteSpace:h}=r,c=e._collapseSpaces(h),p=e._collapseNewlines(h);let f=!c;const g=r.wordWrapWidth+d,m=e._tokenize(t);for(let t=0;t<m.length;t++){let n=m[t];if(e._isNewline(n)){if(!p){l+=e._addLine(o),f=!c,o="",a=0;continue}n=" "}if(c){const t=e.isBreakingSpace(n),r=e.isBreakingSpace(o[o.length-1]);if(t&&r)continue}const s=e._getFromCache(n,d,u,i);if(s>g)if(""!==o&&(l+=e._addLine(o),o="",a=0),e.canBreakWords(n,r.breakWords)){const t=e.wordWrapSplit(n);for(let s=0;s<t.length;s++){let h=t[s],c=h,p=1;for(;t[s+p];){const i=t[s+p];if(e.canBreakChars(c,i,n,s,r.breakWords))break;h+=i,c=i,p++}s+=p-1;const m=e._getFromCache(h,d,u,i);m+a>g&&(l+=e._addLine(o),f=!1,o="",a=0),o+=h,a+=m}}else{o.length>0&&(l+=e._addLine(o),o="",a=0);const r=t===m.length-1;l+=e._addLine(n,!r),f=!1,o="",a=0}else s+a>g&&(f=!1,l+=e._addLine(o),o="",a=0),(o.length>0||!e.isBreakingSpace(n)||f)&&(o+=n,a+=s)}return l+=e._addLine(o,!1),l}static _addLine(t,r=!0){return t=e._trimRight(t),r?`${t}\n`:t}static _getFromCache(t,r,n,i){let s=n[t];return"number"!=typeof s&&(s=e._measureText(t,r,i)+r,n[t]=s),s}static _collapseSpaces(e){return"normal"===e||"pre-line"===e}static _collapseNewlines(e){return"normal"===e}static _trimRight(t){if("string"!=typeof t)return"";for(let r=t.length-1;r>=0;r--){const n=t[r];if(!e.isBreakingSpace(n))break;t=t.slice(0,-1)}return t}static _isNewline(t){return"string"==typeof t&&e._newlines.includes(t.charCodeAt(0))}static isBreakingSpace(t,r){return"string"==typeof t&&e._breakingSpaces.includes(t.charCodeAt(0))}static _tokenize(t){const r=[];let n="";if("string"!=typeof t)return r;for(let i=0;i<t.length;i++){const s=t[i],a=t[i+1];e.isBreakingSpace(s,a)||e._isNewline(s)?(""!==n&&(r.push(n),n=""),"\r"===s&&"\n"===a?(r.push("\r\n"),i++):r.push(s)):n+=s}return""!==n&&r.push(n),r}static canBreakWords(e,t){return t}static canBreakChars(e,t,r,n,i){return!0}static wordWrapSplit(t){return e.graphemeSegmenter(t)}static measureFont(t){if(e._fonts[t])return e._fonts[t];const r=e._context;r.font=t;const n=r.measureText(e.METRICS_STRING+e.BASELINE_SYMBOL),i={ascent:n.actualBoundingBoxAscent,descent:n.actualBoundingBoxDescent,fontSize:n.actualBoundingBoxAscent+n.actualBoundingBoxDescent};return e._fonts[t]=i,i}static clearMetrics(t=""){t?delete e._fonts[t]:e._fonts={}}static get _canvas(){if(!e.__canvas){let t;try{const r=new OffscreenCanvas(0,0),i=r.getContext("2d",s);if(i?.measureText)return e.__canvas=r,r;t=n.e.get().createCanvas()}catch(e){t=n.e.get().createCanvas()}t.width=t.height=10,e.__canvas=t}return e.__canvas}static get _context(){return e.__context||(e.__context=e._canvas.getContext("2d",s)),e.__context}};a.METRICS_STRING="|ÉqÅ",a.BASELINE_SYMBOL="M",a.BASELINE_MULTIPLIER=1.4,a.HEIGHT_MULTIPLIER=2,a.graphemeSegmenter=(()=>{if("function"==typeof Intl?.Segmenter){const e=new Intl.Segmenter;return t=>{const r=e.segment(t),n=[];let i=0;for(const e of r)n[i++]=e.segment;return n}}return e=>[...e]})(),a.experimentalLetterSpacing=!1,a._fonts={},a._newlines=[10,13],a._breakingSpaces=[9,32,8192,8193,8194,8195,8196,8197,8198,8200,8201,8202,8287,12288];let o=a},1242:(e,t,r)=>{r.d(t,{Z:()=>i});const n=["serif","sans-serif","monospace","cursive","fantasy","system-ui"];function i(e){const t="number"==typeof e.fontSize?`${e.fontSize}px`:e.fontSize;let r=e.fontFamily;Array.isArray(e.fontFamily)||(r=e.fontFamily.split(","));for(let e=r.length-1;e>=0;e--){let t=r[e].trim();/([\"\'])[^\'\"]+\1/.test(t)||n.includes(t)||(t=`"${t}"`),r[e]=t}return`${e.fontStyle} ${e.fontVariant} ${e.fontWeight} ${t} ${r.join(",")}`}},3548:(e,t,r)=>{r.d(t,{r:()=>d});var n=r(2577),i=r(9313),s=r(4492),a=r(268),o=r(7276),l=r(2806);const u=1e5;function d(e,t,r,d=0){if(e.texture===s.g.WHITE&&!e.fill)return n.Q.shared.setValue(e.color).setAlpha(e.alpha??1).toHexa();if(!e.fill){const r=t.createPattern(e.texture.source.resource,"repeat"),n=e.matrix.copyTo(i.u.shared);return n.scale(e.texture.frame.width,e.texture.frame.height),r.setTransform(n),r}if(e.fill instanceof l.m){const r=e.fill,n=t.createPattern(r.texture.source.resource,"repeat"),s=r.transform.copyTo(i.u.shared);return s.scale(r.texture.frame.width,r.texture.frame.height),n.setTransform(s),n}if(e.fill instanceof o._){const i=e.fill,s="linear"===i.type,a="local"===i.textureSpace;let o,l=1,h=1;a&&r&&(l=r.width+d,h=r.height+d);let c=!1;if(s){const{start:e,end:r}=i;o=t.createLinearGradient(e.x*l,e.y*h,r.x*l,r.y*h),c=Math.abs(r.x-e.x)<Math.abs(.1*(r.y-e.y))}else{const{center:e,innerRadius:r,outerCenter:n,outerRadius:s}=i;o=t.createRadialGradient(e.x*l,e.y*h,r*l,n.x*l,n.y*h,s*l)}if(c&&a&&r){const e=r.lineHeight/h;for(let t=0;t<r.lines.length;t++){const s=(t*r.lineHeight+d/2)/h;i.colorStops.forEach((t=>{const r=s+t.offset*e;o.addColorStop(Math.floor(r*u)/u,n.Q.shared.setValue(t.color).toHex())}))}}else i.colorStops.forEach((e=>{o.addColorStop(e.offset,n.Q.shared.setValue(e.color).toHex())}));return o}return(0,a.R)("FillStyle not recognised",e),"red"}},5148:(e,t,r)=>{var n=r(8507),i=r(2289),s=r(8422);class a extends s.K{constructor(e){super(),this._renderer=e,e.runners.resolutionChange.add(this)}resolutionChange(){const e=this.renderable;e._autoResolution&&e.onViewUpdate()}destroy(){this._renderer.canvasText.returnTexture(this.texture),this._renderer=null}}class o{constructor(e){this._renderer=e}validateRenderable(e){return e._didTextUpdate}addRenderable(e,t){const r=this._getGpuText(e);e._didTextUpdate&&(this._updateGpuText(e),e._didTextUpdate=!1),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuText(e);t._batcher.updateElement(t)}_updateGpuText(e){const t=this._getGpuText(e);t.texture&&this._renderer.canvasText.returnTexture(t.texture),e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,t.texture=this._renderer.canvasText.getTexture(e),(0,i.s)(t,e)}_getGpuText(e){return e._gpuData[this._renderer.uid]||this.initGpuText(e)}initGpuText(e){const t=new a(this._renderer);return t.renderable=e,t.transform=e.groupTransform,t.bounds={minX:0,maxX:1,minY:0,maxY:0},t.roundPixels=this._renderer._roundPixels|e._roundPixels,e._gpuData[this._renderer.uid]=t,t}destroy(){this._renderer=null}}o.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"text"};var l=r(2437),u=r(218),d=r(4670),h=r(9690),c=r(2558),p=r(2577),f=r(9252),g=r(7608),m=r(1761),x=r(9939);let _=null,y=null;function b(e,t,r){for(let n=0,i=4*r*t;n<t;++n,i+=4)if(0!==e[i+3])return!1;return!0}function S(e,t,r,n,i){const s=4*t;for(let t=n,a=n*s+4*r;t<=i;++t,a+=s)if(0!==e[a+3])return!1;return!0}function w(...e){let t=e[0];t.canvas||(t={canvas:e[0],resolution:e[1]});const{canvas:r}=t,n=Math.min(t.resolution??1,1),i=t.width??r.width,s=t.height??r.height;let a=t.output;if(function(e,t){_||(_=m.e.get().createCanvas(256,128),y=_.getContext("2d",{willReadFrequently:!0}),y.globalCompositeOperation="copy",y.globalAlpha=1),(_.width<e||_.height<t)&&(_.width=(0,x.U5)(e),_.height=(0,x.U5)(t))}(i,s),!y)throw new TypeError("Failed to get canvas 2D context");y.drawImage(r,0,0,i,s,0,0,i*n,s*n);const o=y.getImageData(0,0,i,s).data;let l=0,u=0,d=i-1,h=s-1;for(;u<s&&b(o,i,u);)++u;if(u===s)return f.M.EMPTY;for(;b(o,i,h);)--h;for(;S(o,i,l,u,h);)++l;for(;S(o,i,d,u,h);)--d;return++d,++h,y.globalCompositeOperation="source-over",y.strokeRect(l,u,d-l,h-u),y.globalCompositeOperation="copy",a??(a=new f.M),a.set(l/n,u/n,(d-l)/n,(h-u)/n),a}var v=r(4016),T=r(1242),C=r(3548);const P=new f.M,F=new class{getCanvasAndContext(e){const{text:t,style:r,resolution:n=1}=e,i=r._getFinalPadding(),s=v.P.measureText(t||" ",r),a=Math.ceil(Math.ceil(Math.max(1,s.width)+2*i)*n),o=Math.ceil(Math.ceil(Math.max(1,s.height)+2*i)*n),l=g.N.getOptimalCanvasAndContext(a,o);return this._renderTextToCanvas(t,r,i,n,l),{canvasAndContext:l,frame:r.trim?w({canvas:l.canvas,width:a,height:o,resolution:1,output:P}):P.set(0,0,a,o)}}returnCanvasAndContext(e){g.N.returnCanvasAndContext(e)}_renderTextToCanvas(e,t,r,n,i){const{canvas:s,context:a}=i,o=(0,T.Z)(t),l=v.P.measureText(e||" ",t),u=l.lines,d=l.lineHeight,h=l.lineWidths,c=l.maxLineWidth,f=l.fontProperties,g=s.height;if(a.resetTransform(),a.scale(n,n),a.textBaseline=t.textBaseline,t._stroke?.width){const e=t._stroke;a.lineWidth=e.width,a.miterLimit=e.miterLimit,a.lineJoin=e.join,a.lineCap=e.cap}let m,x;a.font=o;const _=t.dropShadow?2:1;for(let e=0;e<_;++e){const s=t.dropShadow&&0===e,o=s?Math.ceil(Math.max(1,g)+2*r):0,_=o*n;if(s){a.fillStyle="black",a.strokeStyle="black";const e=t.dropShadow,r=e.color,i=e.alpha;a.shadowColor=p.Q.shared.setValue(r).setAlpha(i).toRgbaString();const s=e.blur*n,o=e.distance*n;a.shadowBlur=s,a.shadowOffsetX=Math.cos(e.angle)*o,a.shadowOffsetY=Math.sin(e.angle)*o+_}else{if(a.fillStyle=t._fill?(0,C.r)(t._fill,a,l,2*r):null,t._stroke?.width){const e=.5*t._stroke.width+2*r;a.strokeStyle=(0,C.r)(t._stroke,a,l,e)}a.shadowColor="black"}let y=(d-f.fontSize)/2;d-f.fontSize<0&&(y=0);const b=t._stroke?.width??0;for(let e=0;e<u.length;e++)m=b/2,x=b/2+e*d+f.ascent+y,"right"===t.align?m+=c-h[e]:"center"===t.align&&(m+=(c-h[e])/2),t._stroke?.width&&this._drawLetterSpacing(u[e],t,i,m+r,x+r-o,!0),void 0!==t._fill&&this._drawLetterSpacing(u[e],t,i,m+r,x+r-o)}}_drawLetterSpacing(e,t,r,n,i,s=!1){const{context:a}=r,o=t.letterSpacing;let l=!1;if(v.P.experimentalLetterSpacingSupported&&(v.P.experimentalLetterSpacing?(a.letterSpacing=`${o}px`,a.textLetterSpacing=`${o}px`,l=!0):(a.letterSpacing="0px",a.textLetterSpacing="0px")),0===o||l)return void(s?a.strokeText(e,n,i):a.fillText(e,n,i));let u=n;const d=v.P.graphemeSegmenter(e);let h=a.measureText(e).width,c=0;for(let e=0;e<d.length;++e){const t=d[e];s?a.strokeText(t,u,i):a.fillText(t,u,i);let r="";for(let t=e+1;t<d.length;++t)r+=d[t];c=a.measureText(r).width,u+=h-c+o,h=c}}};class k{constructor(e){this._renderer=e}getTexture(e,t,r,n){"string"==typeof e&&((0,d.t6)("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),e={text:e,style:r,resolution:t}),e.style instanceof h.x||(e.style=new h.x(e.style)),e.textureStyle instanceof u.n||(e.textureStyle=new u.n(e.textureStyle)),"string"!=typeof e.text&&(e.text=e.text.toString());const{text:i,style:s,textureStyle:a}=e,o=e.resolution??this._renderer.resolution,{frame:l,canvasAndContext:p}=F.getCanvasAndContext({text:i,style:s,resolution:o}),f=(0,c.M)(p.canvas,l.width,l.height,o);if(a&&(f.source.style=a),s.trim&&(l.pad(s.padding),f.frame.copyFrom(l),f.frame.scale(1/o),f.updateUvs()),s.filters){const e=this._applyFilters(f,s.filters);return this.returnTexture(f),F.returnCanvasAndContext(p),e}return this._renderer.texture.initSource(f._source),F.returnCanvasAndContext(p),f}returnTexture(e){const t=e.source;t.resource=null,t.uploadMethodId="unknown",t.alphaMode="no-premultiply-alpha",l.W.returnTexture(e,!0)}renderTextToCanvas(){(0,d.t6)("8.10.0","CanvasTextSystem.renderTextToCanvas: no longer supported, use CanvasTextSystem.getTexture instead")}_applyFilters(e,t){const r=this._renderer.renderTarget.renderTarget,n=this._renderer.filter.generateFilteredTexture({texture:e,filters:t});return this._renderer.renderTarget.bind(r,!1),n}destroy(){this._renderer=null}}k.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem,n.Ag.CanvasSystem],name:"canvasText"},n.XO.add(k),n.XO.add(o)},2558:(e,t,r)=>{r.d(t,{M:()=>s});var n=r(2437);const i=new(r(9636).c);function s(e,t,r,s){const a=i;a.minX=0,a.minY=0,a.maxX=e.width/s|0,a.maxY=e.height/s|0;const o=n.W.getOptimalTexture(a.width,a.height,s,!1);return o.source.uploadMethodId="image",o.source.resource=e,o.source.alphaMode="premultiply-alpha-on-upload",o.frame.width=t/s,o.frame.height=r/s,o.source.emit("update",o.source),o.updateUvs(),o}},2289:(e,t,r)=>{r.d(t,{s:()=>i});var n=r(2048);function i(e,t){const{texture:r,bounds:i}=e,s=t._style._getFinalPadding();(0,n.y)(i,t._anchor,r);const a=t._anchor._x*s*2,o=t._anchor._y*s*2;i.minX-=s-a,i.minY-=s-o,i.maxX-=s-a,i.maxY-=s-o}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,